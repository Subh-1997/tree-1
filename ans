1.Binary Tree Inorder Traversal

class Solution {
     
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();

        TreeNode node = root;
        while(true){
            if(node!=null){
                stack.push(node);
                node=node.left;
            }else{
                if(stack.isEmpty()){
                    break;
                }
                node=stack.pop();
                inorder.add(node.val);
                node=node.right;
                
            }
        }
       return inorder;
    }
   
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Binary Tree Level Order Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null){return ans;}

        q.offer(root);
        while(!q.isEmpty()){
            int size =  q.size();
            List<Integer> curr = new  ArrayList<>();
            for(int i=0; i<size; i++){
                TreeNode node=q.poll();
                curr.add(node.val);
                if(node.left!=null){
                    q.offer(node.left);
                }
                if(node.right!=null){
                    q.offer(node.right);
                }
            }
            ans.add(curr);
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Binary Tree Preorder Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<Integer> preorderTraversal(TreeNode root) {
      List<Integer> list = new ArrayList<>();
      Stack<TreeNode> st = new Stack<>();
      if(root==null) return list;
      st.push(root);
      while(!st.isEmpty()){
          root=st.pop();
          list.add(root.val);
          if(root.right!=null){
              st.push(root.right);
          }
          if(root.left!=null){
              st.push(root.left);
          }
      }
         return list;   
    }
  
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Post Order traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> s1 = new Stack<>();
         Stack<TreeNode> s2 = new Stack<>();
         List<Integer> list = new ArrayList<>();
        if(root==null){
            return list;
        }
         s1.push(root);

         while(!s1.isEmpty()){
             root = s1.pop();
             s2.push(root);
             if(root.left!=null) s1.push(root.left);
             if(root.right!=null) s1.push(root.right);
         }
         while(!s2.isEmpty()){
             list.add(s2.pop().val);
         }
         return list;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Maximum Depth of Binary Tree
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }
}
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Symmetric Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
 public boolean isSymmetricHelp(TreeNode left,TreeNode right){
     
     if(left==null || right==null)return left==right;

     if(left.val!=right.val){
     return false;
     }
     return isSymmetricHelp(left.left, right.right)&&isSymmetricHelp(left.right, right.left);

 }

    public boolean isSymmetric(TreeNode root) {
       return isSymmetricHelp(root.left,root.right);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Maximum Level Sum of a Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
       
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null){return 0;}
        int maxSum = Integer.MIN_VALUE;
        int count=0;
        int level=0;
        q.offer(root);
        while(!q.isEmpty()){
            int size =  q.size();
            int sum=0; 
            count++;          
            List<Integer> curr = new  ArrayList<>();
            for(int i=0; i<size; i++){
                TreeNode node=q.poll();
                sum+=node.val;
                if(node.left!=null){
                    q.offer(node.left);
                }
                if(node.right!=null){
                    q.offer(node.right);
                }
               
               
            }
           if(sum>maxSum){
               maxSum = sum;
               level=count;
           }
        }
        return level;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Sum Root to Leaf Numbers
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        return sumOfNodes(root,0);
    }
    public int sumOfNodes(TreeNode root,int currSum){
        if(root==null)return 0;
        currSum = currSum * 10 + root.val;
        if(root.left==null && root.right==null)return currSum;
        int left=sumOfNodes(root.left,currSum);
        int right=sumOfNodes(root.right,currSum);
        return left+right;
    }
}
