1.Binary Tree Inorder Traversal

class Solution {
     
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();

        TreeNode node = root;
        while(true){
            if(node!=null){
                stack.push(node);
                node=node.left;
            }else{
                if(stack.isEmpty()){
                    break;
                }
                node=stack.pop();
                inorder.add(node.val);
                node=node.right;
                
            }
        }
       return inorder;
    }
   
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Binary Tree Level Order Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root==null){return ans;}

        q.offer(root);
        while(!q.isEmpty()){
            int size =  q.size();
            List<Integer> curr = new  ArrayList<>();
            for(int i=0; i<size; i++){
                TreeNode node=q.poll();
                curr.add(node.val);
                if(node.left!=null){
                    q.offer(node.left);
                }
                if(node.right!=null){
                    q.offer(node.right);
                }
            }
            ans.add(curr);
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.
